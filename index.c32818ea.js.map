{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-7c7a5670558d5548.js","node_modules/@parcel/runtime-js/lib/runtime-5909600f3d8bb497.js","src/ts/nodes.ts","node_modules/@parcel/runtime-js/lib/runtime-d441494638075310.js","src/ts/Game.ts","src/ts/utils/random.ts","src/ts/Countries.ts","src/ts/Question.ts","src/ts/ScoreCount.ts","src/ts/Timer.ts","src/ts/index.ts","src/ts/utils/isEqualArray.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"gpNS7\\\":\\\"index.c32818ea.js\\\",\\\"2pwhO\\\":\\\"check.ec9e8a8a.svg\\\",\\\"j81vF\\\":\\\"cross.410ab416.svg\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"2pwhO\")).toString();","const checkSVG = new URL(\"../assets/svg/check.svg\", import.meta.url).href;\nconst crossSVG = new URL(\"../assets/svg/cross.svg\", import.meta.url).href;\n\n/* HTMLElements */\nexport const startBox = document.getElementById(\"start-box\") as HTMLElement;\nexport const startGameButton = document.getElementById(\n\t\"start-game\"\n) as HTMLElement;\nexport const regions = [\n\t...document.querySelectorAll(\"input[type='checkbox']\"),\n] as HTMLInputElement[];\nexport const quizBox = document.getElementById(\"quizbox\") as HTMLElement;\nexport const questionText = document.getElementById(\"question\") as HTMLElement;\nexport const answersContainer = document.getElementById(\n\t\"answer-options\"\n) as HTMLElement;\nexport const answersNodes = [...answersContainer.children];\nexport const flagImage = document.getElementById(\n\t\"flagImage\"\n) as HTMLImageElement;\nexport const nextButton = document.getElementById(\"next\") as HTMLElement;\nexport const resultBox = document.getElementById(\"results\") as HTMLElement;\nexport const resultsTitle = document.getElementById(\n\t\"resultsTitle\"\n) as HTMLElement;\nexport const resultsText = document.getElementById(\n\t\"resultsCount\"\n) as HTMLElement;\nexport const tryAgainButton = document.getElementById(\n\t\"try-again\"\n) as HTMLElement;\nexport const timer = document.getElementById(\"timer\") as HTMLElement;\n\n/* SVGs */\nexport const checkIcon = new Image();\ncheckIcon.src = checkSVG;\ncheckIcon.classList.add(\"absolute\", \"top-0\", \"right-2\", \"bottom-0\", \"my-auto\");\nexport const xIcon = new Image();\nxIcon.src = crossSVG;\nxIcon.classList.add(\"absolute\", \"right-2\", \"top-0\", \"bottom-0\", \"my-auto\");\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"j81vF\")).toString();","import {\n\tstartBox,\n\tquestionText,\n\tanswersContainer,\n\tanswersNodes,\n\tflagImage,\n\tnextButton,\n\tresultBox,\n\tresultsTitle,\n\tresultsText,\n\tcheckIcon,\n\txIcon,\n\tquizBox,\n\ttryAgainButton,\n} from \"./nodes\";\nimport { Question } from \"./Question\";\nimport { ScoreCount } from \"./ScoreCount\";\nimport { Timer } from \"./Timer\";\n\nexport class Game {\n\tquestion: Question;\n\tscoreCount: ScoreCount;\n\ttimer: Timer;\n\n\tconstructor(question: Question, scoreCount: ScoreCount, timer: Timer) {\n\t\tthis.question = question;\n\t\tthis.scoreCount = scoreCount;\n\t\tthis.timer = timer;\n\t\tthis.paintResults = this.paintResults.bind(this);\n\t\tthis.addEventListeners();\n\t\tthis.paintResetQuizbox();\n\t}\n\n\tpaintStartScreen() {\n\t\tstartBox.classList.remove(\"hidden\");\n\t\tquizBox.classList.add(\"hidden\");\n\t\tresultBox.classList.add(\"hidden\");\n\t\tthis.timer.reset();\n\t}\n\n\tpaintResetQuizbox() {\n\t\tstartBox.classList.add(\"hidden\");\n\t\tanswersNodes.forEach((node) => {\n\t\t\tnode.classList.remove(\"Correct\", \"Wrong\");\n\t\t});\n\t\tanswersContainer.classList.remove(\"pointer-events-none\");\n\t\tquizBox.classList.remove(\"hidden\");\n\t\tresultBox.classList.add(\"hidden\");\n\t\tflagImage.classList.add(\"hidden\");\n\t\tnextButton.classList.add(\"hidden\");\n\t\tthis.paintQuestion();\n\t\tthis.timer.start(this.paintResults);\n\t}\n\n\tpaintResults(title: string) {\n\t\tquizBox.classList.add(\"hidden\");\n\t\tresultBox.classList.remove(\"hidden\");\n\t\tresultsTitle.innerText = title;\n\t\tresultsText.innerHTML = `You got <span class=\"text-green-600 text-xl\">${this.scoreCount.get()}</span> correct answers.`;\n\t}\n\n\tpaintAnswerClick(element: HTMLElement, type: \"correct\" | \"wrong\") {\n\t\tif (type === \"correct\") {\n\t\t\telement.classList.add(\"Correct\");\n\t\t\telement.appendChild(checkIcon);\n\t\t\treturn;\n\t\t}\n\t\telement.classList.add(\"Wrong\");\n\t\telement.appendChild(xIcon);\n\t\tconst correctAnswer = answersNodes.find(\n\t\t\t(node) =>\n\t\t\t\tnode.innerHTML == this.question.country.name.common ||\n\t\t\t\tnode.innerHTML == this.question.country.capital[0]\n\t\t) as HTMLElement;\n\t\tcorrectAnswer.classList.add(\"Correct\");\n\t\tcorrectAnswer.appendChild(checkIcon);\n\t}\n\n\tpaintQuestion() {\n\t\tquestionText.innerText = this.question.title;\n\t\tif (this.question.type === \"flag\") {\n\t\t\tflagImage.src = this.question.country.flags.png;\n\t\t\tflagImage.classList.replace(\"hidden\", \"block\");\n\t\t}\n\t\tif (this.question.type === \"flag\" || this.question.type === \"country\") {\n\t\t\tanswersNodes.forEach((item, index) => {\n\t\t\t\titem.innerHTML = this.question.answers[index].name.common;\n\t\t\t});\n\t\t}\n\t\tif (this.question.type === \"capital\") {\n\t\t\tanswersNodes.forEach((item, index) => {\n\t\t\t\titem.innerHTML = this.question.answers[index].capital[0];\n\t\t\t});\n\t\t}\n\t}\n\n\taddEventListeners() {\n\t\tconst controller = new AbortController();\n\t\tanswersContainer.addEventListener(\n\t\t\t\"click\",\n\t\t\t(ev) => {\n\t\t\t\tconst target = ev.target as HTMLElement;\n\t\t\t\tif (target === answersContainer) return;\n\t\t\t\tthis.timer.stop();\n\t\t\t\tanswersContainer.classList.add(\"pointer-events-none\");\n\t\t\t\tconst isCorrect = this.question.check(target);\n\t\t\t\tif (isCorrect) {\n\t\t\t\t\tthis.paintAnswerClick(target, \"correct\");\n\t\t\t\t\tnextButton.classList.remove(\"hidden\");\n\t\t\t\t} else {\n\t\t\t\t\tthis.paintAnswerClick(target, \"wrong\");\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.paintResults(\"Game Over\");\n\t\t\t\t\t}, 2500);\n\t\t\t\t}\n\t\t\t\tisCorrect && this.scoreCount.sum();\n\t\t\t},\n\t\t\t{\n\t\t\t\tsignal: controller.signal,\n\t\t\t}\n\t\t);\n\t\tnextButton.addEventListener(\n\t\t\t\"click\",\n\t\t\t() => {\n\t\t\t\tthis.question.makeNewQuestion();\n\t\t\t\tthis.paintResetQuizbox();\n\t\t\t},\n\t\t\t{\n\t\t\t\tsignal: controller.signal,\n\t\t\t}\n\t\t);\n\t\ttryAgainButton.addEventListener(\n\t\t\t\"click\",\n\t\t\t() => {\n\t\t\t\tcontroller.abort();\n\t\t\t\tthis.paintStartScreen();\n\t\t\t},\n\t\t\t{\n\t\t\t\tonce: true,\n\t\t\t}\n\t\t);\n\t}\n}\n","export const random = (min: number, max: number): 0 | 1 | 2 => {\n\treturn Math.floor(Math.random() * (max - min + 1) + min) as 0 | 1 | 2;\n};\n","import { random } from \"./utils/random\";\n\nexport interface Country {\n\tname: {\n\t\tcommon: string;\n\t};\n\tcapital: string[];\n\tflags: {\n\t\talt: string;\n\t\tpng: string;\n\t\tsvg: string;\n\t};\n\tsubregion: string;\n}\n\nexport class Countries {\n\tdata: Country[] | null;\n\tregions: string[];\n\tpreviousRegions: string[];\n\n\tconstructor(regions: string[]) {\n\t\tthis.regions = regions;\n\t\tthis.data = null;\n\t\tthis.previousRegions = this.loadArray(\"previousRegions\") || [];\n\t}\n\n\tsaveArray(name: string, array: string[]): void {\n\t\tconst stringfiedArray = JSON.stringify(array);\n\t\tsessionStorage.setItem(name, stringfiedArray);\n\t}\n\n\tloadArray<T>(name: string): Array<T> | null {\n\t\tconst stringfiedArray = sessionStorage.getItem(name);\n\t\tif (!stringfiedArray) return null;\n\t\tconst parsedArray = JSON.parse(stringfiedArray);\n\t\treturn parsedArray as Array<T>;\n\t}\n\n\tasync fetch(): Promise<void> {\n\t\tconst API = `https://restcountries.com/v3.1/region/${\n\t\t\tthis.regions[random(0, this.regions.length - 1)]\n\t\t}?fields=name,capital,flags,subregion`;\n\t\tconsole.log(\"fetched\");\n\t\ttry {\n\t\t\tconst response = await fetch(API);\n\t\t\tconst data = await response.json();\n\t\t\tthis.data = data;\n\t\t\tthis.saveArray(\"previousRegions\", this.regions);\n\t\t\tthis.saveArray(\"data\", data);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}\n","import { random } from \"./utils/random\";\nimport { Country } from \"./Countries\";\n\ntype TQuestionType = \"country\" | \"capital\" | \"flag\";\nconst QUESTION_TYPES: TQuestionType[] = [\"country\", \"capital\", \"flag\"];\n\nexport class Question {\n\ttype: TQuestionType;\n\tdata: Country[];\n\tcountry: Country;\n\tanswers: Country[];\n\ttitle: string;\n\n\tconstructor(data: Country[]) {\n\t\tthis.data = data;\n\t\tthis.country = this.selectCountry(this.data);\n\t\tthis.answers = this.makeAnswers(this.country, this.data);\n\t\tthis.type = QUESTION_TYPES[random(0, 2)];\n\t\tthis.title = this.makeQuestionTitle(this.country, this.type);\n\t}\n\n\tselectCountry(countries: Country[]): Country {\n\t\treturn countries[random(0, countries.length - 1)];\n\t}\n\n\tmakeQuestionTitle(country: Country, type: TQuestionType): string {\n\t\tif (type === \"country\") {\n\t\t\treturn `${country.capital[0]} is the Capital of...`;\n\t\t} else if (type === \"capital\") {\n\t\t\treturn `The Capital of ${country.name.common} is...`;\n\t\t}\n\t\treturn \"Which country does this flag belong to..?\";\n\t}\n\n\tmakeAnswers(selectedCountry: Country, countries: Country[]): Country[] {\n\t\tconst answers = countries.filter((country: Country) => {\n\t\t\tif (country.name.common === selectedCountry.name.common) return false;\n\t\t\treturn country.subregion === selectedCountry.subregion;\n\t\t});\n\n\t\twhile (answers.length > 3) {\n\t\t\tanswers.splice(random(0, answers.length), 1);\n\t\t}\n\t\tanswers.splice(random(0, 3), 0, selectedCountry);\n\t\treturn answers;\n\t}\n\n\tmakeNewQuestion() {\n\t\tthis.country = this.selectCountry(this.data);\n\t\tthis.answers = this.makeAnswers(this.country, this.data);\n\t\tthis.title = this.makeQuestionTitle(this.country, this.type);\n\t}\n\n\tcheck(element: HTMLElement) {\n\t\tconst clickedText = element.innerText;\n\t\tif (this.type === \"country\" || this.type === \"flag\") {\n\t\t\tconst isCorrect = clickedText === this.country.name.common;\n\t\t\treturn isCorrect;\n\t\t}\n\t\tconst isCorrect = clickedText === this.country.capital[0];\n\t\treturn isCorrect;\n\t}\n}\n","export class ScoreCount {\n\t_correctCount: number;\n\n\tconstructor() {\n\t\tthis._correctCount = 0;\n\t}\n\n\tsum(): number {\n\t\treturn (this._correctCount += 1);\n\t}\n\tget(): number {\n\t\treturn this._correctCount;\n\t}\n}\n","import { timer } from \"./nodes\";\n\nexport class Timer {\n\t_secondsLeft: number;\n\t_interval: number;\n\n\tconstructor() {\n\t\tthis._secondsLeft = 15;\n\t\tthis._interval = 0;\n\t}\n\n\tstart(callback: (arg: string) => void): void {\n\t\tthis.reset();\n\t\tthis._interval = setInterval(() => {\n\t\t\tthis._secondsLeft--;\n\t\t\ttimer.innerText = this._secondsLeft.toString();\n\t\t\tif (this._secondsLeft === 0) {\n\t\t\t\tthis.stop();\n\t\t\t\tcallback(\"Time's Up!\");\n\t\t\t}\n\t\t}, 1000);\n\t}\n\n\tstop(): void {\n\t\tif (this._interval) clearInterval(this._interval);\n\t}\n\n\treset(): void {\n\t\tthis.stop();\n\t\tthis._secondsLeft = 15;\n\t\ttimer.innerText = this._secondsLeft.toString();\n\t}\n}\n","import { startGameButton, regions } from \"./nodes\";\nimport { isEqualArray } from \"./utils/isEqualArray\";\nimport { Game } from \"./Game\";\nimport { Countries, Country } from \"./Countries\";\nimport { Question } from \"./Question\";\nimport { ScoreCount } from \"./ScoreCount\";\nimport { Timer } from \"./Timer\";\n\nconst startGame = async (regions: string[]) => {\n\tconst countries = new Countries(regions);\n\tif (isEqualArray(regions, countries.previousRegions))\n\t\tcountries.data = countries.loadArray<Country>(\"data\");\n\telse await countries.fetch();\n\tif (!countries.data) return;\n\tconst question = new Question(countries.data);\n\tconst scoreCount = new ScoreCount();\n\tconst timer = new Timer();\n\tconst game = new Game(question, scoreCount, timer);\n};\n\nstartGameButton.addEventListener(\"click\", () => {\n\tconst selectedRegions = regions.filter((region) => region.checked);\n\tif (!selectedRegions) return;\n\tconst regionNames = selectedRegions.map((region) => {\n\t\tconst label = region.nextElementSibling as HTMLElement;\n\t\treturn label.innerText;\n\t});\n\tstartGame(regionNames);\n\tselectedRegions.forEach((region) => (region.checked = false));\n});\n","export const isEqualArray = (\n\tarr1: Array<string>,\n\tarr2: Array<string>\n): boolean => {\n\treturn arr1.join() === arr2.join();\n};\n"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$1d8443b6ded8e150$exports","URL","resolve","url","toString","$cb1cb79e71228a43$var$checkSVG","href","$4a757fc93a3e6d10$exports","$cb1cb79e71228a43$var$crossSVG","$cb1cb79e71228a43$export$d112f52f0c56f79a","document","getElementById","$cb1cb79e71228a43$export$ca784017938384af","$cb1cb79e71228a43$export$6b408984b31c1b30","querySelectorAll","$cb1cb79e71228a43$export$8f4d5981663b06f0","$cb1cb79e71228a43$export$500776a67ad9cd26","$cb1cb79e71228a43$export$15e42c79d89a97a6","$cb1cb79e71228a43$export$3b4305bceda7289e","children","$cb1cb79e71228a43$export$4fde9ba93fe113d7","$cb1cb79e71228a43$export$20141bf56c9254ea","$cb1cb79e71228a43$export$13b1c7b11ef01beb","$cb1cb79e71228a43$export$d40c171051e088ef","$cb1cb79e71228a43$export$b29d1f7d09e6ccf3","$cb1cb79e71228a43$export$f1cc906edb723e7b","$cb1cb79e71228a43$export$9dc4ecf953986f04","$cb1cb79e71228a43$export$1d8a03084661a191","Image","src","classList","add","$cb1cb79e71228a43$export$4d48f840957dea1b","$48f6c7b0f9ee5bd6$export$985739bfa5723e08","constructor","question","scoreCount","timer","this","paintResults","bind","addEventListeners","paintResetQuizbox","paintStartScreen","remove","reset","forEach","node","paintQuestion","start","title","innerText","innerHTML","get","paintAnswerClick","element","type","appendChild","correctAnswer","find","country","name","common","capital","flags","png","replace","item","index","answers","controller","AbortController","addEventListener","ev","target","stop","isCorrect","check","setTimeout","sum","signal","makeNewQuestion","abort","once","$3f275a6e87135c86$export$4385e60b38654f68","min","max","Math","floor","random","$5892b4ab140e62ab$export$b33f41d0b11df887","regions","data","previousRegions","loadArray","saveArray","array","stringfiedArray","stringify","sessionStorage","setItem","getItem","async","API","console","log","response","fetch","json","error","$ee4fb6793dfebeb7$var$QUESTION_TYPES","$ee4fb6793dfebeb7$export$38435c7d2fecd2f","selectCountry","makeAnswers","makeQuestionTitle","countries","selectedCountry","filter","subregion","splice","clickedText","$244b442b5b32d395$export$287b5f27fa0eeb","_correctCount","$61cea5e56685a5dc$export$c57e9b2d8b9e4de","_secondsLeft","_interval","callback","setInterval","clearInterval","selectedRegions","region","checked","arr1","arr2","join","$4aa1cd84f89e5a94$var$startGame","map","nextElementSibling"],"version":3,"file":"index.c32818ea.js.map"}